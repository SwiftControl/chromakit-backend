name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      
    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e .
        uv pip install pytest pytest-cov pytest-asyncio httpx
        
    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          set -e
          cd /opt/chromakit-backend
          
          # Login to GitHub Container Registry
          echo "🔐 Logging into GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          echo "📦 Pulling latest Docker images..."
          docker-compose -f docker-compose.prod.yml pull
          
          # Stop and start containers
          echo "� Redeploying containers..."
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d
          
          # Health check
          sleep 30
          if curl -f -m 5 http://localhost:80/health > /dev/null 2>&1; then
            echo "✅ Staging deployment successful!"
          else
            echo "⚠️ Health check failed - check logs"
            docker-compose -f docker-compose.prod.yml logs --tail=20
          fi
          
          # Clean up old images
          docker image prune -f

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          set -e
          cd /opt/chromakit-backend
          
          # Login to GitHub Container Registry
          echo "🔐 Logging into GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          echo "📦 Pulling latest Docker images..."
          docker-compose -f docker-compose.prod.yml pull
          
          # Stop existing containers gracefully
          echo "🛑 Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down
          
          # Start services with new images
          echo "🚀 Starting updated services..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 45
          
          # Health check with fallbacks
          echo "🔍 Running health check..."
          HEALTH_OK=false
          
          # Try HTTPS first
          if curl -f -m 10 https://chromakit_backend.adriangaitan.dev/health > /dev/null 2>&1; then
            echo "✅ HTTPS deployment successful!"
            echo "🌐 Service available at: https://chromakit_backend.adriangaitan.dev"
            HEALTH_OK=true
          # Try HTTP
          elif curl -f -m 10 http://chromakit_backend.adriangaitan.dev/health > /dev/null 2>&1; then
            echo "✅ HTTP deployment successful!"
            echo "🌐 Service available at: http://chromakit_backend.adriangaitan.dev"
            HEALTH_OK=true
          # Try local nginx
          elif curl -f -m 5 http://localhost:80/health > /dev/null 2>&1; then
            echo "✅ Local nginx deployment successful!"
            echo "🌐 Service running - check DNS configuration"
            HEALTH_OK=true
          # Try direct backend
          elif curl -f -m 5 http://localhost:8000/health > /dev/null 2>&1; then
            echo "✅ Backend deployment successful!"
            echo "🌐 Backend running - check nginx configuration"
            HEALTH_OK=true
          fi
          
          # Show container status
          echo "📊 Container status:"
          docker-compose -f docker-compose.prod.yml ps
          
          if [ "$HEALTH_OK" = "false" ]; then
            echo "❌ Health check failed!"
            echo "📝 Recent logs:"
            docker-compose -f docker-compose.prod.yml logs --tail=30
            exit 1
          fi
          
          # Clean up old images
          echo "🧹 Cleaning up old Docker images..."
          docker image prune -f
          
          echo "✅ Deployment completed successfully!"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}